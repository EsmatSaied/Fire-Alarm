
Fire_Alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f18  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001f18  00001f8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000019ec  00000000  00000000  00001fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c2b  00000000  00000000  000039a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000045cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000470b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000487b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000064c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000073af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000815c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000082bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008549  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008d17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <main>
      7a:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e6       	ldi	r26, 0x6E	; 110
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e6       	ldi	r24, 0x6E	; 110
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_voidInit>:
#include "ADC_private.h"
#include "ADC_registers.h"


void ADC_voidInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	#if ADC_u8_REF_SELECTION== AREF
	CLR_BIT(ADMUX, ADMUX_REFS0);
	CLR_BIT(ADMUX, ADMUX_REFS1);

	#elif ADC_u8_REF_SELECTION== AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
     b3e:	a7 e2       	ldi	r26, 0x27	; 39
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e7 e2       	ldi	r30, 0x27	; 39
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 64       	ori	r24, 0x40	; 64
     b4a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
     b4c:	a7 e2       	ldi	r26, 0x27	; 39
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e7 e2       	ldi	r30, 0x27	; 39
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8f 77       	andi	r24, 0x7F	; 127
     b58:	8c 93       	st	X, r24

#endif

	if (ADC_u8_RESULT_SELECTION== EIGHT_BITS)
		/*Activate Left Adjust Reg.*/
		SET_BIT(ADMUX, ADMUX_ADLAR);
     b5a:	a7 e2       	ldi	r26, 0x27	; 39
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e7 e2       	ldi	r30, 0x27	; 39
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 62       	ori	r24, 0x20	; 32
     b66:	8c 93       	st	X, r24

	/*Set the pre-scaler configuration*/
	ADCSRA &= PRESCALER_SELECTION_BIT_MASK;
     b68:	a6 e2       	ldi	r26, 0x26	; 38
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e6 e2       	ldi	r30, 0x26	; 38
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	88 7f       	andi	r24, 0xF8	; 248
     b74:	8c 93       	st	X, r24
	ADCSRA |= ADC_u8_PRESCALER_SELECTION;
     b76:	a6 e2       	ldi	r26, 0x26	; 38
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e6 e2       	ldi	r30, 0x26	; 38
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	81 60       	ori	r24, 0x01	; 1
     b82:	8c 93       	st	X, r24
}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <ADC_u16GetChannelReading>:

u16 ADC_u16GetChannelReading(u8 Copy_u8Channel)
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	0f 92       	push	r0
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	89 83       	std	Y+1, r24	; 0x01
	/*Set the required channel*/
	ADMUX &= CHANNEL_SELECTION_BIT_MASK;
     b96:	a7 e2       	ldi	r26, 0x27	; 39
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e7 e2       	ldi	r30, 0x27	; 39
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	80 7e       	andi	r24, 0xE0	; 224
     ba2:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
     ba4:	a7 e2       	ldi	r26, 0x27	; 39
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e7 e2       	ldi	r30, 0x27	; 39
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	90 81       	ld	r25, Z
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	89 2b       	or	r24, r25
     bb2:	8c 93       	st	X, r24
#if ADC_u8_START_CONVERSION== MANUAL_TRIGGER
/*Start Conversion*/
SET_BIT(ADCSRA, ADCSRA_ADSC);
     bb4:	a6 e2       	ldi	r26, 0x26	; 38
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e6 e2       	ldi	r30, 0x26	; 38
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	80 64       	ori	r24, 0x40	; 64
     bc0:	8c 93       	st	X, r24
/*Polling until the conversion completion flag arise*/
while((GET_BIT(ADCSRA, ADCSRA_ADIF))== 0);
     bc2:	e6 e2       	ldi	r30, 0x26	; 38
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	82 95       	swap	r24
     bca:	8f 70       	andi	r24, 0x0F	; 15
     bcc:	88 2f       	mov	r24, r24
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	81 70       	andi	r24, 0x01	; 1
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	a9 f3       	breq	.-22     	; 0xbc2 <ADC_u16GetChannelReading+0x38>
/*Clear the completion flag*/
SET_BIT(ADCSRA, ADCSRA_ADIF);
     bd8:	a6 e2       	ldi	r26, 0x26	; 38
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e6 e2       	ldi	r30, 0x26	; 38
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	80 61       	ori	r24, 0x10	; 16
     be4:	8c 93       	st	X, r24
#else
#error "Wrong ADC_u8_START_CONVERSION Configuration"
#endif

#if ADC_u8_RESULT_SELECTION== EIGHT_BITS
return ADCH;
     be6:	e5 e2       	ldi	r30, 0x25	; 37
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	88 2f       	mov	r24, r24
     bee:	90 e0       	ldi	r25, 0x00	; 0
#elif ADC_u8_RESULT_SELECTION== TEN_BITS
return ADC;
#endif
}
     bf0:	0f 90       	pop	r0
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <ADC_voidENABLE>:

void ADC_voidENABLE(void)
{
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
#if ADC_u8_ENABLE_OR_DISABLE== ENABLE
	/*ADC Enable*/
	SET_BIT(ADCSRA, ADCSRA_ADEN);
     c00:	a6 e2       	ldi	r26, 0x26	; 38
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e6 e2       	ldi	r30, 0x26	; 38
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	80 68       	ori	r24, 0x80	; 128
     c0c:	8c 93       	st	X, r24
#endif
}
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <DIO_u8SetPinValue>:
#include "DIO_private.h"
#include "DIO_register.h"
#include "DIO_config.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	28 97       	sbiw	r28, 0x08	; 8
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
     c28:	8a 83       	std	Y+2, r24	; 0x02
     c2a:	6b 83       	std	Y+3, r22	; 0x03
     c2c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState= OK;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8Pin>7)
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	88 30       	cpi	r24, 0x08	; 8
     c36:	10 f0       	brcs	.+4      	; 0xc3c <DIO_u8SetPinValue+0x28>
    {
        Local_u8ErrorState= NOK;
     c38:	19 82       	std	Y+1, r1	; 0x01
     c3a:	f0 c0       	rjmp	.+480    	; 0xe1c <DIO_u8SetPinValue+0x208>
    }
    else
    {
        if(Copy_u8Value==DIO_u8_PIN_LOW)
     c3c:	8c 81       	ldd	r24, Y+4	; 0x04
     c3e:	88 23       	and	r24, r24
     c40:	09 f0       	breq	.+2      	; 0xc44 <DIO_u8SetPinValue+0x30>
     c42:	76 c0       	rjmp	.+236    	; 0xd30 <DIO_u8SetPinValue+0x11c>
        {
            switch(Copy_u8Port)
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	38 87       	std	Y+8, r19	; 0x08
     c4c:	2f 83       	std	Y+7, r18	; 0x07
     c4e:	8f 81       	ldd	r24, Y+7	; 0x07
     c50:	98 85       	ldd	r25, Y+8	; 0x08
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	91 05       	cpc	r25, r1
     c56:	59 f1       	breq	.+86     	; 0xcae <DIO_u8SetPinValue+0x9a>
     c58:	2f 81       	ldd	r18, Y+7	; 0x07
     c5a:	38 85       	ldd	r19, Y+8	; 0x08
     c5c:	22 30       	cpi	r18, 0x02	; 2
     c5e:	31 05       	cpc	r19, r1
     c60:	2c f4       	brge	.+10     	; 0xc6c <DIO_u8SetPinValue+0x58>
     c62:	8f 81       	ldd	r24, Y+7	; 0x07
     c64:	98 85       	ldd	r25, Y+8	; 0x08
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	69 f0       	breq	.+26     	; 0xc84 <DIO_u8SetPinValue+0x70>
     c6a:	60 c0       	rjmp	.+192    	; 0xd2c <DIO_u8SetPinValue+0x118>
     c6c:	2f 81       	ldd	r18, Y+7	; 0x07
     c6e:	38 85       	ldd	r19, Y+8	; 0x08
     c70:	22 30       	cpi	r18, 0x02	; 2
     c72:	31 05       	cpc	r19, r1
     c74:	89 f1       	breq	.+98     	; 0xcd8 <DIO_u8SetPinValue+0xc4>
     c76:	8f 81       	ldd	r24, Y+7	; 0x07
     c78:	98 85       	ldd	r25, Y+8	; 0x08
     c7a:	83 30       	cpi	r24, 0x03	; 3
     c7c:	91 05       	cpc	r25, r1
     c7e:	09 f4       	brne	.+2      	; 0xc82 <DIO_u8SetPinValue+0x6e>
     c80:	40 c0       	rjmp	.+128    	; 0xd02 <DIO_u8SetPinValue+0xee>
     c82:	54 c0       	rjmp	.+168    	; 0xd2c <DIO_u8SetPinValue+0x118>
            {
                case DIO_u8_PORTA: CLR_BIT(PORTA, Copy_u8Pin); break;
     c84:	ab e3       	ldi	r26, 0x3B	; 59
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	eb e3       	ldi	r30, 0x3B	; 59
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	48 2f       	mov	r20, r24
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	02 2e       	mov	r0, r18
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <DIO_u8SetPinValue+0x8e>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <DIO_u8SetPinValue+0x8a>
     ca6:	80 95       	com	r24
     ca8:	84 23       	and	r24, r20
     caa:	8c 93       	st	X, r24
     cac:	b7 c0       	rjmp	.+366    	; 0xe1c <DIO_u8SetPinValue+0x208>
                case DIO_u8_PORTB: CLR_BIT(PORTB, Copy_u8Pin); break;
     cae:	a8 e3       	ldi	r26, 0x38	; 56
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e8 e3       	ldi	r30, 0x38	; 56
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_u8SetPinValue+0xb8>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_u8SetPinValue+0xb4>
     cd0:	80 95       	com	r24
     cd2:	84 23       	and	r24, r20
     cd4:	8c 93       	st	X, r24
     cd6:	a2 c0       	rjmp	.+324    	; 0xe1c <DIO_u8SetPinValue+0x208>
                case DIO_u8_PORTC: CLR_BIT(PORTC, Copy_u8Pin); break;
     cd8:	a5 e3       	ldi	r26, 0x35	; 53
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e5 e3       	ldi	r30, 0x35	; 53
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	48 2f       	mov	r20, r24
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	02 2e       	mov	r0, r18
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <DIO_u8SetPinValue+0xe2>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	0a 94       	dec	r0
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <DIO_u8SetPinValue+0xde>
     cfa:	80 95       	com	r24
     cfc:	84 23       	and	r24, r20
     cfe:	8c 93       	st	X, r24
     d00:	8d c0       	rjmp	.+282    	; 0xe1c <DIO_u8SetPinValue+0x208>
                case DIO_u8_PORTD: CLR_BIT(PORTD, Copy_u8Pin); break;
     d02:	a2 e3       	ldi	r26, 0x32	; 50
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e2 e3       	ldi	r30, 0x32	; 50
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_u8SetPinValue+0x10c>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_u8SetPinValue+0x108>
     d24:	80 95       	com	r24
     d26:	84 23       	and	r24, r20
     d28:	8c 93       	st	X, r24
     d2a:	78 c0       	rjmp	.+240    	; 0xe1c <DIO_u8SetPinValue+0x208>
                default: Local_u8ErrorState= NOK; break;
     d2c:	19 82       	std	Y+1, r1	; 0x01
     d2e:	76 c0       	rjmp	.+236    	; 0xe1c <DIO_u8SetPinValue+0x208>
            }
        }
        else if(Copy_u8Value==DIO_u8_PIN_HIGH)
     d30:	8c 81       	ldd	r24, Y+4	; 0x04
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	09 f0       	breq	.+2      	; 0xd38 <DIO_u8SetPinValue+0x124>
     d36:	71 c0       	rjmp	.+226    	; 0xe1a <DIO_u8SetPinValue+0x206>
        {
            switch(Copy_u8Port)
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	3e 83       	std	Y+6, r19	; 0x06
     d40:	2d 83       	std	Y+5, r18	; 0x05
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	91 05       	cpc	r25, r1
     d4a:	49 f1       	breq	.+82     	; 0xd9e <DIO_u8SetPinValue+0x18a>
     d4c:	2d 81       	ldd	r18, Y+5	; 0x05
     d4e:	3e 81       	ldd	r19, Y+6	; 0x06
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	2c f4       	brge	.+10     	; 0xd60 <DIO_u8SetPinValue+0x14c>
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	61 f0       	breq	.+24     	; 0xd76 <DIO_u8SetPinValue+0x162>
     d5e:	5b c0       	rjmp	.+182    	; 0xe16 <DIO_u8SetPinValue+0x202>
     d60:	2d 81       	ldd	r18, Y+5	; 0x05
     d62:	3e 81       	ldd	r19, Y+6	; 0x06
     d64:	22 30       	cpi	r18, 0x02	; 2
     d66:	31 05       	cpc	r19, r1
     d68:	71 f1       	breq	.+92     	; 0xdc6 <DIO_u8SetPinValue+0x1b2>
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	9e 81       	ldd	r25, Y+6	; 0x06
     d6e:	83 30       	cpi	r24, 0x03	; 3
     d70:	91 05       	cpc	r25, r1
     d72:	e9 f1       	breq	.+122    	; 0xdee <DIO_u8SetPinValue+0x1da>
     d74:	50 c0       	rjmp	.+160    	; 0xe16 <DIO_u8SetPinValue+0x202>
            {
            	case DIO_u8_PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
     d76:	ab e3       	ldi	r26, 0x3B	; 59
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	eb e3       	ldi	r30, 0x3B	; 59
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_u8SetPinValue+0x180>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_u8SetPinValue+0x17c>
     d98:	84 2b       	or	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	3f c0       	rjmp	.+126    	; 0xe1c <DIO_u8SetPinValue+0x208>
                case DIO_u8_PORTB: SET_BIT(PORTB, Copy_u8Pin); break;
     d9e:	a8 e3       	ldi	r26, 0x38	; 56
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e8 e3       	ldi	r30, 0x38	; 56
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_u8SetPinValue+0x1a8>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <DIO_u8SetPinValue+0x1a4>
     dc0:	84 2b       	or	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	2b c0       	rjmp	.+86     	; 0xe1c <DIO_u8SetPinValue+0x208>
                case DIO_u8_PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
     dc6:	a5 e3       	ldi	r26, 0x35	; 53
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e5 e3       	ldi	r30, 0x35	; 53
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_u8SetPinValue+0x1d0>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_u8SetPinValue+0x1cc>
     de8:	84 2b       	or	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	17 c0       	rjmp	.+46     	; 0xe1c <DIO_u8SetPinValue+0x208>
                case DIO_u8_PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
     dee:	a2 e3       	ldi	r26, 0x32	; 50
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e2 e3       	ldi	r30, 0x32	; 50
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_u8SetPinValue+0x1f8>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_u8SetPinValue+0x1f4>
     e10:	84 2b       	or	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <DIO_u8SetPinValue+0x208>
                default: Local_u8ErrorState= NOK; break;
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <DIO_u8SetPinValue+0x208>
            }
        }
        else
        {
            Local_u8ErrorState= NOK;
     e1a:	19 82       	std	Y+1, r1	; 0x01
        }
    }
    return Local_u8ErrorState;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1e:	28 96       	adiw	r28, 0x08	; 8
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <DIO_u8SetPortValue+0x6>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <DIO_u8SetPortValue+0x8>
     e38:	0f 92       	push	r0
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	8a 83       	std	Y+2, r24	; 0x02
     e40:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState= OK;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8Port)
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	3d 83       	std	Y+5, r19	; 0x05
     e4e:	2c 83       	std	Y+4, r18	; 0x04
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	9d 81       	ldd	r25, Y+5	; 0x05
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	91 05       	cpc	r25, r1
     e58:	d1 f0       	breq	.+52     	; 0xe8e <DIO_u8SetPortValue+0x5e>
     e5a:	2c 81       	ldd	r18, Y+4	; 0x04
     e5c:	3d 81       	ldd	r19, Y+5	; 0x05
     e5e:	22 30       	cpi	r18, 0x02	; 2
     e60:	31 05       	cpc	r19, r1
     e62:	2c f4       	brge	.+10     	; 0xe6e <DIO_u8SetPortValue+0x3e>
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	9d 81       	ldd	r25, Y+5	; 0x05
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	61 f0       	breq	.+24     	; 0xe84 <DIO_u8SetPortValue+0x54>
     e6c:	1f c0       	rjmp	.+62     	; 0xeac <DIO_u8SetPortValue+0x7c>
     e6e:	2c 81       	ldd	r18, Y+4	; 0x04
     e70:	3d 81       	ldd	r19, Y+5	; 0x05
     e72:	22 30       	cpi	r18, 0x02	; 2
     e74:	31 05       	cpc	r19, r1
     e76:	81 f0       	breq	.+32     	; 0xe98 <DIO_u8SetPortValue+0x68>
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	9d 81       	ldd	r25, Y+5	; 0x05
     e7c:	83 30       	cpi	r24, 0x03	; 3
     e7e:	91 05       	cpc	r25, r1
     e80:	81 f0       	breq	.+32     	; 0xea2 <DIO_u8SetPortValue+0x72>
     e82:	14 c0       	rjmp	.+40     	; 0xeac <DIO_u8SetPortValue+0x7c>
    {
        case DIO_u8_PORTA: PORTA= Copy_u8Value; break;
     e84:	eb e3       	ldi	r30, 0x3B	; 59
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	80 83       	st	Z, r24
     e8c:	10 c0       	rjmp	.+32     	; 0xeae <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTB: PORTB= Copy_u8Value; break;
     e8e:	e8 e3       	ldi	r30, 0x38	; 56
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	80 83       	st	Z, r24
     e96:	0b c0       	rjmp	.+22     	; 0xeae <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTC: PORTC= Copy_u8Value; break;
     e98:	e5 e3       	ldi	r30, 0x35	; 53
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	80 83       	st	Z, r24
     ea0:	06 c0       	rjmp	.+12     	; 0xeae <DIO_u8SetPortValue+0x7e>
        case DIO_u8_PORTD: PORTD= Copy_u8Value; break;
     ea2:	e2 e3       	ldi	r30, 0x32	; 50
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	80 83       	st	Z, r24
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <DIO_u8SetPortValue+0x7e>
        default: Local_u8ErrorState= NOK; break;
     eac:	19 82       	std	Y+1, r1	; 0x01
    }


    return Local_u8ErrorState;
     eae:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_u8Value)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	27 97       	sbiw	r28, 0x07	; 7
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	8a 83       	std	Y+2, r24	; 0x02
     ed6:	6b 83       	std	Y+3, r22	; 0x03
     ed8:	5d 83       	std	Y+5, r21	; 0x05
     eda:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState= OK;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8Value!= NULL)
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	09 f4       	brne	.+2      	; 0xeea <DIO_u8GetPinValue+0x2a>
     ee8:	73 c0       	rjmp	.+230    	; 0xfd0 <DIO_u8GetPinValue+0x110>
        {
            switch(Copy_u8Port)
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	3f 83       	std	Y+7, r19	; 0x07
     ef2:	2e 83       	std	Y+6, r18	; 0x06
     ef4:	4e 81       	ldd	r20, Y+6	; 0x06
     ef6:	5f 81       	ldd	r21, Y+7	; 0x07
     ef8:	41 30       	cpi	r20, 0x01	; 1
     efa:	51 05       	cpc	r21, r1
     efc:	59 f1       	breq	.+86     	; 0xf54 <DIO_u8GetPinValue+0x94>
     efe:	8e 81       	ldd	r24, Y+6	; 0x06
     f00:	9f 81       	ldd	r25, Y+7	; 0x07
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	91 05       	cpc	r25, r1
     f06:	34 f4       	brge	.+12     	; 0xf14 <DIO_u8GetPinValue+0x54>
     f08:	2e 81       	ldd	r18, Y+6	; 0x06
     f0a:	3f 81       	ldd	r19, Y+7	; 0x07
     f0c:	21 15       	cp	r18, r1
     f0e:	31 05       	cpc	r19, r1
     f10:	69 f0       	breq	.+26     	; 0xf2c <DIO_u8GetPinValue+0x6c>
     f12:	5c c0       	rjmp	.+184    	; 0xfcc <DIO_u8GetPinValue+0x10c>
     f14:	4e 81       	ldd	r20, Y+6	; 0x06
     f16:	5f 81       	ldd	r21, Y+7	; 0x07
     f18:	42 30       	cpi	r20, 0x02	; 2
     f1a:	51 05       	cpc	r21, r1
     f1c:	79 f1       	breq	.+94     	; 0xf7c <DIO_u8GetPinValue+0xbc>
     f1e:	8e 81       	ldd	r24, Y+6	; 0x06
     f20:	9f 81       	ldd	r25, Y+7	; 0x07
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	91 05       	cpc	r25, r1
     f26:	09 f4       	brne	.+2      	; 0xf2a <DIO_u8GetPinValue+0x6a>
     f28:	3d c0       	rjmp	.+122    	; 0xfa4 <DIO_u8GetPinValue+0xe4>
     f2a:	50 c0       	rjmp	.+160    	; 0xfcc <DIO_u8GetPinValue+0x10c>
            {
                case DIO_u8_PORTA: *Copy_u8Value= GET_BIT(PINA, Copy_u8Pin); break;
     f2c:	e9 e3       	ldi	r30, 0x39	; 57
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	a9 01       	movw	r20, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_u8GetPinValue+0x84>
     f40:	55 95       	asr	r21
     f42:	47 95       	ror	r20
     f44:	8a 95       	dec	r24
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_u8GetPinValue+0x80>
     f48:	ca 01       	movw	r24, r20
     f4a:	81 70       	andi	r24, 0x01	; 1
     f4c:	ec 81       	ldd	r30, Y+4	; 0x04
     f4e:	fd 81       	ldd	r31, Y+5	; 0x05
     f50:	80 83       	st	Z, r24
     f52:	40 c0       	rjmp	.+128    	; 0xfd4 <DIO_u8GetPinValue+0x114>
                case DIO_u8_PORTB: *Copy_u8Value= GET_BIT(PINB, Copy_u8Pin); break;
     f54:	e6 e3       	ldi	r30, 0x36	; 54
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a9 01       	movw	r20, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_u8GetPinValue+0xac>
     f68:	55 95       	asr	r21
     f6a:	47 95       	ror	r20
     f6c:	8a 95       	dec	r24
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_u8GetPinValue+0xa8>
     f70:	ca 01       	movw	r24, r20
     f72:	81 70       	andi	r24, 0x01	; 1
     f74:	ec 81       	ldd	r30, Y+4	; 0x04
     f76:	fd 81       	ldd	r31, Y+5	; 0x05
     f78:	80 83       	st	Z, r24
     f7a:	2c c0       	rjmp	.+88     	; 0xfd4 <DIO_u8GetPinValue+0x114>
                case DIO_u8_PORTC: *Copy_u8Value= GET_BIT(PINC, Copy_u8Pin); break;
     f7c:	e3 e3       	ldi	r30, 0x33	; 51
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	a9 01       	movw	r20, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_u8GetPinValue+0xd4>
     f90:	55 95       	asr	r21
     f92:	47 95       	ror	r20
     f94:	8a 95       	dec	r24
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_u8GetPinValue+0xd0>
     f98:	ca 01       	movw	r24, r20
     f9a:	81 70       	andi	r24, 0x01	; 1
     f9c:	ec 81       	ldd	r30, Y+4	; 0x04
     f9e:	fd 81       	ldd	r31, Y+5	; 0x05
     fa0:	80 83       	st	Z, r24
     fa2:	18 c0       	rjmp	.+48     	; 0xfd4 <DIO_u8GetPinValue+0x114>
                case DIO_u8_PORTD: *Copy_u8Value= GET_BIT(PIND, Copy_u8Pin); break;
     fa4:	e0 e3       	ldi	r30, 0x30	; 48
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	a9 01       	movw	r20, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_u8GetPinValue+0xfc>
     fb8:	55 95       	asr	r21
     fba:	47 95       	ror	r20
     fbc:	8a 95       	dec	r24
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_u8GetPinValue+0xf8>
     fc0:	ca 01       	movw	r24, r20
     fc2:	81 70       	andi	r24, 0x01	; 1
     fc4:	ec 81       	ldd	r30, Y+4	; 0x04
     fc6:	fd 81       	ldd	r31, Y+5	; 0x05
     fc8:	80 83       	st	Z, r24
     fca:	04 c0       	rjmp	.+8      	; 0xfd4 <DIO_u8GetPinValue+0x114>
                default: Local_u8ErrorState= NOK; break;
     fcc:	19 82       	std	Y+1, r1	; 0x01
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_u8GetPinValue+0x114>
            }
        }
    else
    {
        Local_u8ErrorState= NULL_POINTER;
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorState;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd6:	27 96       	adiw	r28, 0x07	; 7
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port, u8* Copy_u8Value)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <DIO_u8GetPortValue+0x6>
     fee:	00 d0       	rcall	.+0      	; 0xff0 <DIO_u8GetPortValue+0x8>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <DIO_u8GetPortValue+0xa>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	8a 83       	std	Y+2, r24	; 0x02
     ff8:	7c 83       	std	Y+4, r23	; 0x04
     ffa:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState= OK;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8Value!= NULL)
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	a9 f1       	breq	.+106    	; 0x1072 <DIO_u8GetPortValue+0x8a>
        {
            switch(Copy_u8Port)
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	3e 83       	std	Y+6, r19	; 0x06
    1010:	2d 83       	std	Y+5, r18	; 0x05
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	91 05       	cpc	r25, r1
    101a:	d1 f0       	breq	.+52     	; 0x1050 <DIO_u8GetPortValue+0x68>
    101c:	2d 81       	ldd	r18, Y+5	; 0x05
    101e:	3e 81       	ldd	r19, Y+6	; 0x06
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	2c f4       	brge	.+10     	; 0x1030 <DIO_u8GetPortValue+0x48>
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	9e 81       	ldd	r25, Y+6	; 0x06
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	61 f0       	breq	.+24     	; 0x1046 <DIO_u8GetPortValue+0x5e>
    102e:	1f c0       	rjmp	.+62     	; 0x106e <DIO_u8GetPortValue+0x86>
    1030:	2d 81       	ldd	r18, Y+5	; 0x05
    1032:	3e 81       	ldd	r19, Y+6	; 0x06
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	81 f0       	breq	.+32     	; 0x105a <DIO_u8GetPortValue+0x72>
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	9e 81       	ldd	r25, Y+6	; 0x06
    103e:	83 30       	cpi	r24, 0x03	; 3
    1040:	91 05       	cpc	r25, r1
    1042:	81 f0       	breq	.+32     	; 0x1064 <DIO_u8GetPortValue+0x7c>
    1044:	14 c0       	rjmp	.+40     	; 0x106e <DIO_u8GetPortValue+0x86>
            {
                case DIO_u8_PORTA: *Copy_u8Value= Copy_u8Port; break;
    1046:	eb 81       	ldd	r30, Y+3	; 0x03
    1048:	fc 81       	ldd	r31, Y+4	; 0x04
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	80 83       	st	Z, r24
    104e:	13 c0       	rjmp	.+38     	; 0x1076 <DIO_u8GetPortValue+0x8e>
                case DIO_u8_PORTB: *Copy_u8Value= Copy_u8Port; break;
    1050:	eb 81       	ldd	r30, Y+3	; 0x03
    1052:	fc 81       	ldd	r31, Y+4	; 0x04
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	80 83       	st	Z, r24
    1058:	0e c0       	rjmp	.+28     	; 0x1076 <DIO_u8GetPortValue+0x8e>
                case DIO_u8_PORTC: *Copy_u8Value= Copy_u8Port; break;
    105a:	eb 81       	ldd	r30, Y+3	; 0x03
    105c:	fc 81       	ldd	r31, Y+4	; 0x04
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	80 83       	st	Z, r24
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <DIO_u8GetPortValue+0x8e>
                case DIO_u8_PORTD: *Copy_u8Value= Copy_u8Port; break;
    1064:	eb 81       	ldd	r30, Y+3	; 0x03
    1066:	fc 81       	ldd	r31, Y+4	; 0x04
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	80 83       	st	Z, r24
    106c:	04 c0       	rjmp	.+8      	; 0x1076 <DIO_u8GetPortValue+0x8e>
                default: Local_u8ErrorState= NOK; break;
    106e:	19 82       	std	Y+1, r1	; 0x01
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_u8GetPortValue+0x8e>
            }
        }
    else
    {
        Local_u8ErrorState= NULL_POINTER;
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorState;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	26 96       	adiw	r28, 0x06	; 6
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <LCD_voidSendCommand>:
#include "LCD_config.h"
#include "LCD_private.h"
#include "LCD_interface.h"

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	2f 97       	sbiw	r28, 0x0f	; 15
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	8f 87       	std	Y+15, r24	; 0x0f
	//set RW pin to write
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_RW_PIN, DIO_u8_PIN_LOW);
    10a0:	83 e0       	ldi	r24, 0x03	; 3
    10a2:	66 e0       	ldi	r22, 0x06	; 6
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
	//set RS to be command
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_RS_PIN, DIO_u8_PIN_LOW);
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	67 e0       	ldi	r22, 0x07	; 7
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
	//send the command to LCD
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Command);
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	6f 85       	ldd	r22, Y+15	; 0x0f
    10b8:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_u8SetPortValue>
	//enable pulse
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_E_PIN, DIO_u8_PIN_HIGH);
    10bc:	83 e0       	ldi	r24, 0x03	; 3
    10be:	65 e0       	ldi	r22, 0x05	; 5
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a0 e0       	ldi	r26, 0x00	; 0
    10cc:	b0 e4       	ldi	r27, 0x40	; 64
    10ce:	8b 87       	std	Y+11, r24	; 0x0b
    10d0:	9c 87       	std	Y+12, r25	; 0x0c
    10d2:	ad 87       	std	Y+13, r26	; 0x0d
    10d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10da:	8d 85       	ldd	r24, Y+13	; 0x0d
    10dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a ef       	ldi	r20, 0xFA	; 250
    10e4:	54 e4       	ldi	r21, 0x44	; 68
    10e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	8f 83       	std	Y+7, r24	; 0x07
    10f0:	98 87       	std	Y+8, r25	; 0x08
    10f2:	a9 87       	std	Y+9, r26	; 0x09
    10f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10f6:	6f 81       	ldd	r22, Y+7	; 0x07
    10f8:	78 85       	ldd	r23, Y+8	; 0x08
    10fa:	89 85       	ldd	r24, Y+9	; 0x09
    10fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    110a:	88 23       	and	r24, r24
    110c:	2c f4       	brge	.+10     	; 0x1118 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	3f c0       	rjmp	.+126    	; 0x1196 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1118:	6f 81       	ldd	r22, Y+7	; 0x07
    111a:	78 85       	ldd	r23, Y+8	; 0x08
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    112c:	18 16       	cp	r1, r24
    112e:	4c f5       	brge	.+82     	; 0x1182 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1130:	6b 85       	ldd	r22, Y+11	; 0x0b
    1132:	7c 85       	ldd	r23, Y+12	; 0x0c
    1134:	8d 85       	ldd	r24, Y+13	; 0x0d
    1136:	9e 85       	ldd	r25, Y+14	; 0x0e
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <LCD_voidSendCommand+0xee>
    115a:	88 ec       	ldi	r24, 0xC8	; 200
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9c 83       	std	Y+4, r25	; 0x04
    1160:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <LCD_voidSendCommand+0xdc>
    116a:	9c 83       	std	Y+4, r25	; 0x04
    116c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	69 f7       	brne	.-38     	; 0x115a <LCD_voidSendCommand+0xd0>
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1182:	6f 81       	ldd	r22, Y+7	; 0x07
    1184:	78 85       	ldd	r23, Y+8	; 0x08
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <LCD_voidSendCommand+0x118>
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_E_PIN, DIO_u8_PIN_LOW);
    11aa:	83 e0       	ldi	r24, 0x03	; 3
    11ac:	65 e0       	ldi	r22, 0x05	; 5
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
}
    11b4:	2f 96       	adiw	r28, 0x0f	; 15
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	2f 97       	sbiw	r28, 0x0f	; 15
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	8f 87       	std	Y+15, r24	; 0x0f
		//set RW pin to write
		DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_RW_PIN, DIO_u8_PIN_LOW);
    11dc:	83 e0       	ldi	r24, 0x03	; 3
    11de:	66 e0       	ldi	r22, 0x06	; 6
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
		//set RS to be data
		DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_RS_PIN, DIO_u8_PIN_HIGH);
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	67 e0       	ldi	r22, 0x07	; 7
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
		//send the command to LCD
		DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data);
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    11f4:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_u8SetPortValue>
		//enable pulse
		DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_E_PIN, DIO_u8_PIN_HIGH);
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	65 e0       	ldi	r22, 0x05	; 5
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a0 e0       	ldi	r26, 0x00	; 0
    1208:	b0 e4       	ldi	r27, 0x40	; 64
    120a:	8b 87       	std	Y+11, r24	; 0x0b
    120c:	9c 87       	std	Y+12, r25	; 0x0c
    120e:	ad 87       	std	Y+13, r26	; 0x0d
    1210:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1212:	6b 85       	ldd	r22, Y+11	; 0x0b
    1214:	7c 85       	ldd	r23, Y+12	; 0x0c
    1216:	8d 85       	ldd	r24, Y+13	; 0x0d
    1218:	9e 85       	ldd	r25, Y+14	; 0x0e
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	4a ef       	ldi	r20, 0xFA	; 250
    1220:	54 e4       	ldi	r21, 0x44	; 68
    1222:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	8f 83       	std	Y+7, r24	; 0x07
    122c:	98 87       	std	Y+8, r25	; 0x08
    122e:	a9 87       	std	Y+9, r26	; 0x09
    1230:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1232:	6f 81       	ldd	r22, Y+7	; 0x07
    1234:	78 85       	ldd	r23, Y+8	; 0x08
    1236:	89 85       	ldd	r24, Y+9	; 0x09
    1238:	9a 85       	ldd	r25, Y+10	; 0x0a
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e8       	ldi	r20, 0x80	; 128
    1240:	5f e3       	ldi	r21, 0x3F	; 63
    1242:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1246:	88 23       	and	r24, r24
    1248:	2c f4       	brge	.+10     	; 0x1254 <LCD_voidSendData+0x8e>
		__ticks = 1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	9e 83       	std	Y+6, r25	; 0x06
    1250:	8d 83       	std	Y+5, r24	; 0x05
    1252:	3f c0       	rjmp	.+126    	; 0x12d2 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1254:	6f 81       	ldd	r22, Y+7	; 0x07
    1256:	78 85       	ldd	r23, Y+8	; 0x08
    1258:	89 85       	ldd	r24, Y+9	; 0x09
    125a:	9a 85       	ldd	r25, Y+10	; 0x0a
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	3f ef       	ldi	r19, 0xFF	; 255
    1260:	4f e7       	ldi	r20, 0x7F	; 127
    1262:	57 e4       	ldi	r21, 0x47	; 71
    1264:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1268:	18 16       	cp	r1, r24
    126a:	4c f5       	brge	.+82     	; 0x12be <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126c:	6b 85       	ldd	r22, Y+11	; 0x0b
    126e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1270:	8d 85       	ldd	r24, Y+13	; 0x0d
    1272:	9e 85       	ldd	r25, Y+14	; 0x0e
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e2       	ldi	r20, 0x20	; 32
    127a:	51 e4       	ldi	r21, 0x41	; 65
    127c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	bc 01       	movw	r22, r24
    1286:	cd 01       	movw	r24, r26
    1288:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	9e 83       	std	Y+6, r25	; 0x06
    1292:	8d 83       	std	Y+5, r24	; 0x05
    1294:	0f c0       	rjmp	.+30     	; 0x12b4 <LCD_voidSendData+0xee>
    1296:	88 ec       	ldi	r24, 0xC8	; 200
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	9c 83       	std	Y+4, r25	; 0x04
    129c:	8b 83       	std	Y+3, r24	; 0x03
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <LCD_voidSendData+0xdc>
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	9e 83       	std	Y+6, r25	; 0x06
    12b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b4:	8d 81       	ldd	r24, Y+5	; 0x05
    12b6:	9e 81       	ldd	r25, Y+6	; 0x06
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	69 f7       	brne	.-38     	; 0x1296 <LCD_voidSendData+0xd0>
    12bc:	14 c0       	rjmp	.+40     	; 0x12e6 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12be:	6f 81       	ldd	r22, Y+7	; 0x07
    12c0:	78 85       	ldd	r23, Y+8	; 0x08
    12c2:	89 85       	ldd	r24, Y+9	; 0x09
    12c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	9e 83       	std	Y+6, r25	; 0x06
    12d0:	8d 83       	std	Y+5, r24	; 0x05
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	9e 81       	ldd	r25, Y+6	; 0x06
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	9a 81       	ldd	r25, Y+2	; 0x02
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	f1 f7       	brne	.-4      	; 0x12de <LCD_voidSendData+0x118>
    12e2:	9a 83       	std	Y+2, r25	; 0x02
    12e4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_E_PIN, DIO_u8_PIN_LOW);
    12e6:	83 e0       	ldi	r24, 0x03	; 3
    12e8:	65 e0       	ldi	r22, 0x05	; 5
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
}
    12f0:	2f 96       	adiw	r28, 0x0f	; 15
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <LCD_voidInit>:

void LCD_voidInit(void)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	e8 97       	sbiw	r28, 0x38	; 56
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a0 e2       	ldi	r26, 0x20	; 32
    131c:	b2 e4       	ldi	r27, 0x42	; 66
    131e:	8d ab       	std	Y+53, r24	; 0x35
    1320:	9e ab       	std	Y+54, r25	; 0x36
    1322:	af ab       	std	Y+55, r26	; 0x37
    1324:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1326:	6d a9       	ldd	r22, Y+53	; 0x35
    1328:	7e a9       	ldd	r23, Y+54	; 0x36
    132a:	8f a9       	ldd	r24, Y+55	; 0x37
    132c:	98 ad       	ldd	r25, Y+56	; 0x38
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	4a ef       	ldi	r20, 0xFA	; 250
    1334:	54 e4       	ldi	r21, 0x44	; 68
    1336:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	89 ab       	std	Y+49, r24	; 0x31
    1340:	9a ab       	std	Y+50, r25	; 0x32
    1342:	ab ab       	std	Y+51, r26	; 0x33
    1344:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1346:	69 a9       	ldd	r22, Y+49	; 0x31
    1348:	7a a9       	ldd	r23, Y+50	; 0x32
    134a:	8b a9       	ldd	r24, Y+51	; 0x33
    134c:	9c a9       	ldd	r25, Y+52	; 0x34
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e8       	ldi	r20, 0x80	; 128
    1354:	5f e3       	ldi	r21, 0x3F	; 63
    1356:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    135a:	88 23       	and	r24, r24
    135c:	2c f4       	brge	.+10     	; 0x1368 <LCD_voidInit+0x66>
		__ticks = 1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	98 ab       	std	Y+48, r25	; 0x30
    1364:	8f a7       	std	Y+47, r24	; 0x2f
    1366:	3f c0       	rjmp	.+126    	; 0x13e6 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1368:	69 a9       	ldd	r22, Y+49	; 0x31
    136a:	7a a9       	ldd	r23, Y+50	; 0x32
    136c:	8b a9       	ldd	r24, Y+51	; 0x33
    136e:	9c a9       	ldd	r25, Y+52	; 0x34
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	3f ef       	ldi	r19, 0xFF	; 255
    1374:	4f e7       	ldi	r20, 0x7F	; 127
    1376:	57 e4       	ldi	r21, 0x47	; 71
    1378:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    137c:	18 16       	cp	r1, r24
    137e:	4c f5       	brge	.+82     	; 0x13d2 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1380:	6d a9       	ldd	r22, Y+53	; 0x35
    1382:	7e a9       	ldd	r23, Y+54	; 0x36
    1384:	8f a9       	ldd	r24, Y+55	; 0x37
    1386:	98 ad       	ldd	r25, Y+56	; 0x38
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e2       	ldi	r20, 0x20	; 32
    138e:	51 e4       	ldi	r21, 0x41	; 65
    1390:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	98 ab       	std	Y+48, r25	; 0x30
    13a6:	8f a7       	std	Y+47, r24	; 0x2f
    13a8:	0f c0       	rjmp	.+30     	; 0x13c8 <LCD_voidInit+0xc6>
    13aa:	88 ec       	ldi	r24, 0xC8	; 200
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9e a7       	std	Y+46, r25	; 0x2e
    13b0:	8d a7       	std	Y+45, r24	; 0x2d
    13b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    13b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <LCD_voidInit+0xb4>
    13ba:	9e a7       	std	Y+46, r25	; 0x2e
    13bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13be:	8f a5       	ldd	r24, Y+47	; 0x2f
    13c0:	98 a9       	ldd	r25, Y+48	; 0x30
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	98 ab       	std	Y+48, r25	; 0x30
    13c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ca:	98 a9       	ldd	r25, Y+48	; 0x30
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	69 f7       	brne	.-38     	; 0x13aa <LCD_voidInit+0xa8>
    13d0:	14 c0       	rjmp	.+40     	; 0x13fa <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d2:	69 a9       	ldd	r22, Y+49	; 0x31
    13d4:	7a a9       	ldd	r23, Y+50	; 0x32
    13d6:	8b a9       	ldd	r24, Y+51	; 0x33
    13d8:	9c a9       	ldd	r25, Y+52	; 0x34
    13da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	98 ab       	std	Y+48, r25	; 0x30
    13e4:	8f a7       	std	Y+47, r24	; 0x2f
    13e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e8:	98 a9       	ldd	r25, Y+48	; 0x30
    13ea:	9c a7       	std	Y+44, r25	; 0x2c
    13ec:	8b a7       	std	Y+43, r24	; 0x2b
    13ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    13f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <LCD_voidInit+0xf0>
    13f6:	9c a7       	std	Y+44, r25	; 0x2c
    13f8:	8b a7       	std	Y+43, r24	; 0x2b
	//as in data sheet, RS&RW=0, it means send command so call its fn
	/*function set command
	 * 2 lines
	 * font= 5*7
	 */
	LCD_voidSendCommand(0b00111000);
    13fa:	88 e3       	ldi	r24, 0x38	; 56
    13fc:	0e 94 45 08 	call	0x108a	; 0x108a <LCD_voidSendCommand>
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a0 e8       	ldi	r26, 0x80	; 128
    1406:	bf e3       	ldi	r27, 0x3F	; 63
    1408:	8f a3       	std	Y+39, r24	; 0x27
    140a:	98 a7       	std	Y+40, r25	; 0x28
    140c:	a9 a7       	std	Y+41, r26	; 0x29
    140e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1410:	6f a1       	ldd	r22, Y+39	; 0x27
    1412:	78 a5       	ldd	r23, Y+40	; 0x28
    1414:	89 a5       	ldd	r24, Y+41	; 0x29
    1416:	9a a5       	ldd	r25, Y+42	; 0x2a
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	4a ef       	ldi	r20, 0xFA	; 250
    141e:	54 e4       	ldi	r21, 0x44	; 68
    1420:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	8b a3       	std	Y+35, r24	; 0x23
    142a:	9c a3       	std	Y+36, r25	; 0x24
    142c:	ad a3       	std	Y+37, r26	; 0x25
    142e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1430:	6b a1       	ldd	r22, Y+35	; 0x23
    1432:	7c a1       	ldd	r23, Y+36	; 0x24
    1434:	8d a1       	ldd	r24, Y+37	; 0x25
    1436:	9e a1       	ldd	r25, Y+38	; 0x26
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e8       	ldi	r20, 0x80	; 128
    143e:	5f e3       	ldi	r21, 0x3F	; 63
    1440:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1444:	88 23       	and	r24, r24
    1446:	2c f4       	brge	.+10     	; 0x1452 <LCD_voidInit+0x150>
		__ticks = 1;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	9a a3       	std	Y+34, r25	; 0x22
    144e:	89 a3       	std	Y+33, r24	; 0x21
    1450:	3f c0       	rjmp	.+126    	; 0x14d0 <LCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    1452:	6b a1       	ldd	r22, Y+35	; 0x23
    1454:	7c a1       	ldd	r23, Y+36	; 0x24
    1456:	8d a1       	ldd	r24, Y+37	; 0x25
    1458:	9e a1       	ldd	r25, Y+38	; 0x26
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	3f ef       	ldi	r19, 0xFF	; 255
    145e:	4f e7       	ldi	r20, 0x7F	; 127
    1460:	57 e4       	ldi	r21, 0x47	; 71
    1462:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1466:	18 16       	cp	r1, r24
    1468:	4c f5       	brge	.+82     	; 0x14bc <LCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146a:	6f a1       	ldd	r22, Y+39	; 0x27
    146c:	78 a5       	ldd	r23, Y+40	; 0x28
    146e:	89 a5       	ldd	r24, Y+41	; 0x29
    1470:	9a a5       	ldd	r25, Y+42	; 0x2a
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e2       	ldi	r20, 0x20	; 32
    1478:	51 e4       	ldi	r21, 0x41	; 65
    147a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9a a3       	std	Y+34, r25	; 0x22
    1490:	89 a3       	std	Y+33, r24	; 0x21
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <LCD_voidInit+0x1b0>
    1494:	88 ec       	ldi	r24, 0xC8	; 200
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	98 a3       	std	Y+32, r25	; 0x20
    149a:	8f 8f       	std	Y+31, r24	; 0x1f
    149c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    149e:	98 a1       	ldd	r25, Y+32	; 0x20
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <LCD_voidInit+0x19e>
    14a4:	98 a3       	std	Y+32, r25	; 0x20
    14a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a8:	89 a1       	ldd	r24, Y+33	; 0x21
    14aa:	9a a1       	ldd	r25, Y+34	; 0x22
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	9a a3       	std	Y+34, r25	; 0x22
    14b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b2:	89 a1       	ldd	r24, Y+33	; 0x21
    14b4:	9a a1       	ldd	r25, Y+34	; 0x22
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	69 f7       	brne	.-38     	; 0x1494 <LCD_voidInit+0x192>
    14ba:	14 c0       	rjmp	.+40     	; 0x14e4 <LCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14bc:	6b a1       	ldd	r22, Y+35	; 0x23
    14be:	7c a1       	ldd	r23, Y+36	; 0x24
    14c0:	8d a1       	ldd	r24, Y+37	; 0x25
    14c2:	9e a1       	ldd	r25, Y+38	; 0x26
    14c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	9a a3       	std	Y+34, r25	; 0x22
    14ce:	89 a3       	std	Y+33, r24	; 0x21
    14d0:	89 a1       	ldd	r24, Y+33	; 0x21
    14d2:	9a a1       	ldd	r25, Y+34	; 0x22
    14d4:	9e 8f       	std	Y+30, r25	; 0x1e
    14d6:	8d 8f       	std	Y+29, r24	; 0x1d
    14d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <LCD_voidInit+0x1da>
    14e0:	9e 8f       	std	Y+30, r25	; 0x1e
    14e2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*display on/off control command
	 * 1-display enable
	 * 2-cursor off
	 * 3-blink cursor off
	 */
	LCD_voidSendCommand(0b00001100);
    14e4:	8c e0       	ldi	r24, 0x0C	; 12
    14e6:	0e 94 45 08 	call	0x108a	; 0x108a <LCD_voidSendCommand>
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	a0 e8       	ldi	r26, 0x80	; 128
    14f0:	bf e3       	ldi	r27, 0x3F	; 63
    14f2:	89 8f       	std	Y+25, r24	; 0x19
    14f4:	9a 8f       	std	Y+26, r25	; 0x1a
    14f6:	ab 8f       	std	Y+27, r26	; 0x1b
    14f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fa:	69 8d       	ldd	r22, Y+25	; 0x19
    14fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1500:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	4a ef       	ldi	r20, 0xFA	; 250
    1508:	54 e4       	ldi	r21, 0x44	; 68
    150a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	8d 8b       	std	Y+21, r24	; 0x15
    1514:	9e 8b       	std	Y+22, r25	; 0x16
    1516:	af 8b       	std	Y+23, r26	; 0x17
    1518:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    151a:	6d 89       	ldd	r22, Y+21	; 0x15
    151c:	7e 89       	ldd	r23, Y+22	; 0x16
    151e:	8f 89       	ldd	r24, Y+23	; 0x17
    1520:	98 8d       	ldd	r25, Y+24	; 0x18
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e8       	ldi	r20, 0x80	; 128
    1528:	5f e3       	ldi	r21, 0x3F	; 63
    152a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    152e:	88 23       	and	r24, r24
    1530:	2c f4       	brge	.+10     	; 0x153c <LCD_voidInit+0x23a>
		__ticks = 1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	9c 8b       	std	Y+20, r25	; 0x14
    1538:	8b 8b       	std	Y+19, r24	; 0x13
    153a:	3f c0       	rjmp	.+126    	; 0x15ba <LCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    153c:	6d 89       	ldd	r22, Y+21	; 0x15
    153e:	7e 89       	ldd	r23, Y+22	; 0x16
    1540:	8f 89       	ldd	r24, Y+23	; 0x17
    1542:	98 8d       	ldd	r25, Y+24	; 0x18
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	3f ef       	ldi	r19, 0xFF	; 255
    1548:	4f e7       	ldi	r20, 0x7F	; 127
    154a:	57 e4       	ldi	r21, 0x47	; 71
    154c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1550:	18 16       	cp	r1, r24
    1552:	4c f5       	brge	.+82     	; 0x15a6 <LCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1554:	69 8d       	ldd	r22, Y+25	; 0x19
    1556:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1558:	8b 8d       	ldd	r24, Y+27	; 0x1b
    155a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e2       	ldi	r20, 0x20	; 32
    1562:	51 e4       	ldi	r21, 0x41	; 65
    1564:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	bc 01       	movw	r22, r24
    156e:	cd 01       	movw	r24, r26
    1570:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	9c 8b       	std	Y+20, r25	; 0x14
    157a:	8b 8b       	std	Y+19, r24	; 0x13
    157c:	0f c0       	rjmp	.+30     	; 0x159c <LCD_voidInit+0x29a>
    157e:	88 ec       	ldi	r24, 0xC8	; 200
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9a 8b       	std	Y+18, r25	; 0x12
    1584:	89 8b       	std	Y+17, r24	; 0x11
    1586:	89 89       	ldd	r24, Y+17	; 0x11
    1588:	9a 89       	ldd	r25, Y+18	; 0x12
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	f1 f7       	brne	.-4      	; 0x158a <LCD_voidInit+0x288>
    158e:	9a 8b       	std	Y+18, r25	; 0x12
    1590:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1592:	8b 89       	ldd	r24, Y+19	; 0x13
    1594:	9c 89       	ldd	r25, Y+20	; 0x14
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	9c 8b       	std	Y+20, r25	; 0x14
    159a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159c:	8b 89       	ldd	r24, Y+19	; 0x13
    159e:	9c 89       	ldd	r25, Y+20	; 0x14
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	69 f7       	brne	.-38     	; 0x157e <LCD_voidInit+0x27c>
    15a4:	14 c0       	rjmp	.+40     	; 0x15ce <LCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a6:	6d 89       	ldd	r22, Y+21	; 0x15
    15a8:	7e 89       	ldd	r23, Y+22	; 0x16
    15aa:	8f 89       	ldd	r24, Y+23	; 0x17
    15ac:	98 8d       	ldd	r25, Y+24	; 0x18
    15ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9c 8b       	std	Y+20, r25	; 0x14
    15b8:	8b 8b       	std	Y+19, r24	; 0x13
    15ba:	8b 89       	ldd	r24, Y+19	; 0x13
    15bc:	9c 89       	ldd	r25, Y+20	; 0x14
    15be:	98 8b       	std	Y+16, r25	; 0x10
    15c0:	8f 87       	std	Y+15, r24	; 0x0f
    15c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c4:	98 89       	ldd	r25, Y+16	; 0x10
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <LCD_voidInit+0x2c4>
    15ca:	98 8b       	std	Y+16, r25	; 0x10
    15cc:	8f 87       	std	Y+15, r24	; 0x0f
	//wait for more than 39us
	_delay_ms(1);
	//LCD clear
	LCD_voidSendCommand(0b00000001);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	0e 94 45 08 	call	0x108a	; 0x108a <LCD_voidSendCommand>
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a0 e0       	ldi	r26, 0x00	; 0
    15da:	b0 e4       	ldi	r27, 0x40	; 64
    15dc:	8b 87       	std	Y+11, r24	; 0x0b
    15de:	9c 87       	std	Y+12, r25	; 0x0c
    15e0:	ad 87       	std	Y+13, r26	; 0x0d
    15e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	4a ef       	ldi	r20, 0xFA	; 250
    15f2:	54 e4       	ldi	r21, 0x44	; 68
    15f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	8f 83       	std	Y+7, r24	; 0x07
    15fe:	98 87       	std	Y+8, r25	; 0x08
    1600:	a9 87       	std	Y+9, r26	; 0x09
    1602:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1604:	6f 81       	ldd	r22, Y+7	; 0x07
    1606:	78 85       	ldd	r23, Y+8	; 0x08
    1608:	89 85       	ldd	r24, Y+9	; 0x09
    160a:	9a 85       	ldd	r25, Y+10	; 0x0a
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e8       	ldi	r20, 0x80	; 128
    1612:	5f e3       	ldi	r21, 0x3F	; 63
    1614:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1618:	88 23       	and	r24, r24
    161a:	2c f4       	brge	.+10     	; 0x1626 <LCD_voidInit+0x324>
		__ticks = 1;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9e 83       	std	Y+6, r25	; 0x06
    1622:	8d 83       	std	Y+5, r24	; 0x05
    1624:	3f c0       	rjmp	.+126    	; 0x16a4 <LCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    1626:	6f 81       	ldd	r22, Y+7	; 0x07
    1628:	78 85       	ldd	r23, Y+8	; 0x08
    162a:	89 85       	ldd	r24, Y+9	; 0x09
    162c:	9a 85       	ldd	r25, Y+10	; 0x0a
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	3f ef       	ldi	r19, 0xFF	; 255
    1632:	4f e7       	ldi	r20, 0x7F	; 127
    1634:	57 e4       	ldi	r21, 0x47	; 71
    1636:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    163a:	18 16       	cp	r1, r24
    163c:	4c f5       	brge	.+82     	; 0x1690 <LCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1640:	7c 85       	ldd	r23, Y+12	; 0x0c
    1642:	8d 85       	ldd	r24, Y+13	; 0x0d
    1644:	9e 85       	ldd	r25, Y+14	; 0x0e
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e2       	ldi	r20, 0x20	; 32
    164c:	51 e4       	ldi	r21, 0x41	; 65
    164e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <LCD_voidInit+0x384>
    1668:	88 ec       	ldi	r24, 0xC8	; 200
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9c 83       	std	Y+4, r25	; 0x04
    166e:	8b 83       	std	Y+3, r24	; 0x03
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <LCD_voidInit+0x372>
    1678:	9c 83       	std	Y+4, r25	; 0x04
    167a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	69 f7       	brne	.-38     	; 0x1668 <LCD_voidInit+0x366>
    168e:	14 c0       	rjmp	.+40     	; 0x16b8 <LCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1690:	6f 81       	ldd	r22, Y+7	; 0x07
    1692:	78 85       	ldd	r23, Y+8	; 0x08
    1694:	89 85       	ldd	r24, Y+9	; 0x09
    1696:	9a 85       	ldd	r25, Y+10	; 0x0a
    1698:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 83       	std	Y+5, r24	; 0x05
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	9a 81       	ldd	r25, Y+2	; 0x02
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <LCD_voidInit+0x3ae>
    16b4:	9a 83       	std	Y+2, r25	; 0x02
    16b6:	89 83       	std	Y+1, r24	; 0x01
	//wait for more than 1.53ms
		_delay_ms(2);


}
    16b8:	e8 96       	adiw	r28, 0x38	; 56
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <LCD_voidWriteString>:

void LCD_voidWriteString(char const *Copy_pchString)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <LCD_voidWriteString+0x6>
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	0a c0       	rjmp	.+20     	; 0x16ee <LCD_voidWriteString+0x24>
	while(*Copy_pchString != '\0')
		{
			LCD_voidSendData(*Copy_pchString);
    16da:	e9 81       	ldd	r30, Y+1	; 0x01
    16dc:	fa 81       	ldd	r31, Y+2	; 0x02
    16de:	80 81       	ld	r24, Z
    16e0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_voidSendData>
			Copy_pchString++;
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	01 96       	adiw	r24, 0x01	; 1
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_voidWriteString(char const *Copy_pchString)
{
	while(*Copy_pchString != '\0')
    16ee:	e9 81       	ldd	r30, Y+1	; 0x01
    16f0:	fa 81       	ldd	r31, Y+2	; 0x02
    16f2:	80 81       	ld	r24, Z
    16f4:	88 23       	and	r24, r24
    16f6:	89 f7       	brne	.-30     	; 0x16da <LCD_voidWriteString+0x10>
	/*u8 Iterator;
	for(Iterator=0; string[Iterator]!=0; Iterator++)
	{
		LCD_voidSendData(string[Iterator]);
	}*/
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	28 97       	sbiw	r28, 0x08	; 8
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	6d 83       	std	Y+5, r22	; 0x05
    1720:	7e 83       	std	Y+6, r23	; 0x06
    1722:	8f 83       	std	Y+7, r24	; 0x07
    1724:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32Reserved=1; /*3mlnaha 1 w 5lena el do while t check 3la 1 bdl 0 34an
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a0 e0       	ldi	r26, 0x00	; 0
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	9a 83       	std	Y+2, r25	; 0x02
    1732:	ab 83       	std	Y+3, r26	; 0x03
    1734:	bc 83       	std	Y+4, r27	; 0x04
    1736:	36 c0       	rjmp	.+108    	; 0x17a4 <LCD_voidWriteNumber+0xa2>
	a2dr atb3 arqam feha 0 3l ymen, y3ny bzwd 1 gnb el rqm el gayly k t7ayol bs msh 3ayza atb3o*/

	while(Copy_u32Number!=0)
	{
		Local_u32Reserved=Local_u32Reserved*10 + Copy_u32Number%10;
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	9a 81       	ldd	r25, Y+2	; 0x02
    173c:	ab 81       	ldd	r26, Y+3	; 0x03
    173e:	bc 81       	ldd	r27, Y+4	; 0x04
    1740:	2a e0       	ldi	r18, 0x0A	; 10
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	bc 01       	movw	r22, r24
    174a:	cd 01       	movw	r24, r26
    174c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__mulsi3>
    1750:	7b 01       	movw	r14, r22
    1752:	8c 01       	movw	r16, r24
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	af 81       	ldd	r26, Y+7	; 0x07
    175a:	b8 85       	ldd	r27, Y+8	; 0x08
    175c:	2a e0       	ldi	r18, 0x0A	; 10
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	8e 0d       	add	r24, r14
    1772:	9f 1d       	adc	r25, r15
    1774:	a0 1f       	adc	r26, r16
    1776:	b1 1f       	adc	r27, r17
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	9a 83       	std	Y+2, r25	; 0x02
    177c:	ab 83       	std	Y+3, r26	; 0x03
    177e:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number/=10;
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	af 81       	ldd	r26, Y+7	; 0x07
    1786:	b8 85       	ldd	r27, Y+8	; 0x08
    1788:	2a e0       	ldi	r18, 0x0A	; 10
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	bc 01       	movw	r22, r24
    1792:	cd 01       	movw	r24, r26
    1794:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
    1798:	da 01       	movw	r26, r20
    179a:	c9 01       	movw	r24, r18
    179c:	8d 83       	std	Y+5, r24	; 0x05
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	af 83       	std	Y+7, r26	; 0x07
    17a2:	b8 87       	std	Y+8, r27	; 0x08
void LCD_voidWriteNumber(u32 Copy_u32Number)
{
	u32 Local_u32Reserved=1; /*3mlnaha 1 w 5lena el do while t check 3la 1 bdl 0 34an
	a2dr atb3 arqam feha 0 3l ymen, y3ny bzwd 1 gnb el rqm el gayly k t7ayol bs msh 3ayza atb3o*/

	while(Copy_u32Number!=0)
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	af 81       	ldd	r26, Y+7	; 0x07
    17aa:	b8 85       	ldd	r27, Y+8	; 0x08
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	a1 05       	cpc	r26, r1
    17b0:	b1 05       	cpc	r27, r1
    17b2:	11 f6       	brne	.-124    	; 0x1738 <LCD_voidWriteNumber+0x36>
		/*this is the logic of
		swapping digits of no, i use it in palindrome code with Neso academy*/
	}
	do
	{
		LCD_voidSendData((Local_u32Reserved%10)+'0');//+'0' to convert to ascii
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	ab 81       	ldd	r26, Y+3	; 0x03
    17ba:	bc 81       	ldd	r27, Y+4	; 0x04
    17bc:	2a e0       	ldi	r18, 0x0A	; 10
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	80 5d       	subi	r24, 0xD0	; 208
    17d2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_voidSendData>
		Local_u32Reserved/=10;
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	ab 81       	ldd	r26, Y+3	; 0x03
    17dc:	bc 81       	ldd	r27, Y+4	; 0x04
    17de:	2a e0       	ldi	r18, 0x0A	; 10
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__udivmodsi4>
    17ee:	da 01       	movw	r26, r20
    17f0:	c9 01       	movw	r24, r18
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	9a 83       	std	Y+2, r25	; 0x02
    17f6:	ab 83       	std	Y+3, r26	; 0x03
    17f8:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(Local_u32Reserved!=1);
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1800:	bc 81       	ldd	r27, Y+4	; 0x04
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	91 05       	cpc	r25, r1
    1806:	a1 05       	cpc	r26, r1
    1808:	b1 05       	cpc	r27, r1
    180a:	a1 f6       	brne	.-88     	; 0x17b4 <LCD_voidWriteNumber+0xb2>

	/*ana kont 3amla implementation by itoa fn(it's a pre-defined fn in c but in E.S we
	* use limited memories so as a rule we should write everything just as we need*/
}
    180c:	28 96       	adiw	r28, 0x08	; 8
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	08 95       	ret

00001826 <LCD_voidGotoXY>:

void LCD_voidGotoXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <LCD_voidGotoXY+0x6>
    182c:	0f 92       	push	r0
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	8a 83       	std	Y+2, r24	; 0x02
    1834:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;//we are already know the add won't exceed 80

	/*Addresses starts from address 0*/
	if(Copy_u8XPos==LCD_u8_FIRST_LINE)
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	88 23       	and	r24, r24
    183a:	19 f4       	brne	.+6      	; 0x1842 <LCD_voidGotoXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	06 c0       	rjmp	.+12     	; 0x184e <LCD_voidGotoXY+0x28>
	}

	/*Addresses starts with address 0x40*/
	else if(Copy_u8XPos==LCD_u8_SECOND_LINE)
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	19 f4       	brne	.+6      	; 0x184e <LCD_voidGotoXY+0x28>
	{
		Local_u8Address=0x40+Copy_u8YPos;
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	80 5c       	subi	r24, 0xC0	; 192
    184c:	89 83       	std	Y+1, r24	; 0x01
	}

	/*sending the SET DDRAM address command with bit 7 equal to 1
	 * we could do this in several ways (SET_BIT(Local_u8Address,7)),
	 * Local_u8Address|= 1<<7, Local_u8Address+0b10000000, Local_u8Address+128*/
	LCD_voidSendCommand(Local_u8Address+128);
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	80 58       	subi	r24, 0x80	; 128
    1852:	0e 94 45 08 	call	0x108a	; 0x108a <LCD_voidSendCommand>
}
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <LCD_voidCustomCharacter>:

void LCD_voidCustomCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{/*pattern no is the block no mn el 8 blocks el available lya fl CGRAM*/
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	27 97       	sbiw	r28, 0x07	; 7
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	9c 83       	std	Y+4, r25	; 0x04
    1878:	8b 83       	std	Y+3, r24	; 0x03
    187a:	6d 83       	std	Y+5, r22	; 0x05
    187c:	4e 83       	std	Y+6, r20	; 0x06
    187e:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address, Local_u8PatternCounter; //u8 34an el max 3ndy 8*8=64

	/*1-Calculate the required address of CGRAM*/
	Local_u8Address= Copy_u8PatternNumber*8; //8 el far2 ben kol block wl tany
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	8a 83       	std	Y+2, r24	; 0x02
	/*2-Set CGRAM address with bit7=0 & bit6=1*/
	LCD_voidSendCommand(Local_u8Address+64);//+0b01000000 according to datasheet
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	80 5c       	subi	r24, 0xC0	; 192
    1898:	0e 94 45 08 	call	0x108a	; 0x108a <LCD_voidSendCommand>

	for(Local_u8PatternCounter=0; Local_u8PatternCounter<8; Local_u8PatternCounter++)
    189c:	19 82       	std	Y+1, r1	; 0x01
    189e:	0e c0       	rjmp	.+28     	; 0x18bc <LCD_voidCustomCharacter+0x5a>
	{
		/*3-Storing the pattern into CGRAM*/
		LCD_voidSendData(Copy_pu8Pattern[Local_u8PatternCounter]);/*from the datasheet we
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	fc 01       	movw	r30, r24
    18ac:	e2 0f       	add	r30, r18
    18ae:	f3 1f       	adc	r31, r19
    18b0:	80 81       	ld	r24, Z
    18b2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_voidSendData>
	/*1-Calculate the required address of CGRAM*/
	Local_u8Address= Copy_u8PatternNumber*8; //8 el far2 ben kol block wl tany
	/*2-Set CGRAM address with bit7=0 & bit6=1*/
	LCD_voidSendCommand(Local_u8Address+64);//+0b01000000 according to datasheet

	for(Local_u8PatternCounter=0; Local_u8PatternCounter<8; Local_u8PatternCounter++)
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	8f 5f       	subi	r24, 0xFF	; 255
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	88 30       	cpi	r24, 0x08	; 8
    18c0:	78 f3       	brcs	.-34     	; 0x18a0 <LCD_voidCustomCharacter+0x3e>
		/*3-Storing the pattern into CGRAM*/
		LCD_voidSendData(Copy_pu8Pattern[Local_u8PatternCounter]);/*from the datasheet we
		found that the way to write to CG or DD RAM is the same so it's a regular send data*/
	}
	/*4-shift the address counter to the DDRAM*/
	LCD_voidGotoXY(Copy_u8XPos, Copy_u8YPos);
    18c2:	8e 81       	ldd	r24, Y+6	; 0x06
    18c4:	6f 81       	ldd	r22, Y+7	; 0x07
    18c6:	0e 94 13 0c 	call	0x1826	; 0x1826 <LCD_voidGotoXY>
	/*/LCD_voidSendCommand(0b10000000); da lw msh 3ayza el user y7dd pos hwa el char
	 * 3latol hytl3 3la awl pos*/
	/*5-Passing the block no to be displayed*/
	LCD_voidSendData(Copy_u8PatternNumber);
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_voidSendData>
}
    18d0:	27 96       	adiw	r28, 0x07	; 7
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <LED_voidON>:
#include "LED_private.h"
#include  "DIO_interface.h"
#include  "PORT_interface.h"

void LED_voidON(LEDS * Copy_StructLED)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <LED_voidON+0x6>
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_StructLED->LED_ACTIVE_STATE== ATIVE_HIGH)
    18f0:	e9 81       	ldd	r30, Y+1	; 0x01
    18f2:	fa 81       	ldd	r31, Y+2	; 0x02
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	59 f4       	brne	.+22     	; 0x1910 <LED_voidON+0x2e>
	{
		DIO_u8SetPinValue(Copy_StructLED->LED_u8_PORT, Copy_StructLED->LED_u8_PIN, DIO_u8_PIN_HIGH);
    18fa:	e9 81       	ldd	r30, Y+1	; 0x01
    18fc:	fa 81       	ldd	r31, Y+2	; 0x02
    18fe:	80 81       	ld	r24, Z
    1900:	e9 81       	ldd	r30, Y+1	; 0x01
    1902:	fa 81       	ldd	r31, Y+2	; 0x02
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	69 2f       	mov	r22, r25
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
    190e:	0f c0       	rjmp	.+30     	; 0x192e <LED_voidON+0x4c>
	}
	else if(Copy_StructLED->LED_ACTIVE_STATE== ATIVE_LOW)
    1910:	e9 81       	ldd	r30, Y+1	; 0x01
    1912:	fa 81       	ldd	r31, Y+2	; 0x02
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	88 23       	and	r24, r24
    1918:	51 f4       	brne	.+20     	; 0x192e <LED_voidON+0x4c>
	{
		DIO_u8SetPinValue(Copy_StructLED->LED_u8_PORT, Copy_StructLED->LED_u8_PIN, DIO_u8_PIN_LOW);
    191a:	e9 81       	ldd	r30, Y+1	; 0x01
    191c:	fa 81       	ldd	r31, Y+2	; 0x02
    191e:	80 81       	ld	r24, Z
    1920:	e9 81       	ldd	r30, Y+1	; 0x01
    1922:	fa 81       	ldd	r31, Y+2	; 0x02
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	69 2f       	mov	r22, r25
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
	}
}
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <LED_voidOFF>:

void LED_voidOFF(LEDS * Copy_StructLED)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <LED_voidOFF+0x6>
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
    	if(Copy_StructLED->LED_ACTIVE_STATE== ATIVE_HIGH)
    1946:	e9 81       	ldd	r30, Y+1	; 0x01
    1948:	fa 81       	ldd	r31, Y+2	; 0x02
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	59 f4       	brne	.+22     	; 0x1966 <LED_voidOFF+0x2e>
	{
		DIO_u8SetPinValue(Copy_StructLED->LED_u8_PORT, Copy_StructLED->LED_u8_PIN, DIO_u8_PIN_LOW);
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	80 81       	ld	r24, Z
    1956:	e9 81       	ldd	r30, Y+1	; 0x01
    1958:	fa 81       	ldd	r31, Y+2	; 0x02
    195a:	91 81       	ldd	r25, Z+1	; 0x01
    195c:	69 2f       	mov	r22, r25
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
    1964:	0f c0       	rjmp	.+30     	; 0x1984 <LED_voidOFF+0x4c>
	}
	else if(Copy_StructLED->LED_ACTIVE_STATE== ATIVE_LOW)
    1966:	e9 81       	ldd	r30, Y+1	; 0x01
    1968:	fa 81       	ldd	r31, Y+2	; 0x02
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	88 23       	and	r24, r24
    196e:	51 f4       	brne	.+20     	; 0x1984 <LED_voidOFF+0x4c>
	{
		DIO_u8SetPinValue(Copy_StructLED->LED_u8_PORT, Copy_StructLED->LED_u8_PIN, DIO_u8_PIN_HIGH);
    1970:	e9 81       	ldd	r30, Y+1	; 0x01
    1972:	fa 81       	ldd	r31, Y+2	; 0x02
    1974:	80 81       	ld	r24, Z
    1976:	e9 81       	ldd	r30, Y+1	; 0x01
    1978:	fa 81       	ldd	r31, Y+2	; 0x02
    197a:	91 81       	ldd	r25, Z+1	; 0x01
    197c:	69 2f       	mov	r22, r25
    197e:	41 e0       	ldi	r20, 0x01	; 1
    1980:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
	}

}
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_register.h"
#include "PORT_interface.h"

void PORT_voidInit(void)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    DDRA= PORTA_DIR;
    1996:	ea e3       	ldi	r30, 0x3A	; 58
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	8e ef       	ldi	r24, 0xFE	; 254
    199c:	80 83       	st	Z, r24
    DDRB= PORTB_DIR;
    199e:	e7 e3       	ldi	r30, 0x37	; 55
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	8f ef       	ldi	r24, 0xFF	; 255
    19a4:	80 83       	st	Z, r24
    DDRC= PORTC_DIR;
    19a6:	e4 e3       	ldi	r30, 0x34	; 52
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	80 83       	st	Z, r24
    DDRD= PORTD_DIR;
    19ae:	e1 e3       	ldi	r30, 0x31	; 49
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	80 83       	st	Z, r24

    PORTA= PORTA_INITIAL_VALUE;
    19b6:	eb e3       	ldi	r30, 0x3B	; 59
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8e e3       	ldi	r24, 0x3E	; 62
    19bc:	80 83       	st	Z, r24
    PORTB= PORTB_INITIAL_VALUE;
    19be:	e8 e3       	ldi	r30, 0x38	; 56
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 ee       	ldi	r24, 0xE0	; 224
    19c4:	80 83       	st	Z, r24
    PORTC= PORTC_INITIAL_VALUE;
    19c6:	e5 e3       	ldi	r30, 0x35	; 53
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
    19cc:	80 83       	st	Z, r24
    PORTD= PORTD_INITIAL_VALUE;
    19ce:	e2 e3       	ldi	r30, 0x32	; 50
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	8f ef       	ldi	r24, 0xFF	; 255
    19d4:	80 83       	st	Z, r24
}
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <main>:
#include "LED_interface.h"
#include "ADC_interface.h"
#include <util/delay.h>

void main(void)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	c5 54       	subi	r28, 0x45	; 69
    19e6:	d0 40       	sbci	r29, 0x00	; 0
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
	u16 Local_u16ADCReading, Local_u16Temp;
	u8 Degree[8]= {0b00000010, 0b00000101, 0b00000010,0,0,0,0,0};
    19f2:	ce 01       	movw	r24, r28
    19f4:	81 96       	adiw	r24, 0x21	; 33
    19f6:	9b ab       	std	Y+51, r25	; 0x33
    19f8:	8a ab       	std	Y+50, r24	; 0x32
    19fa:	ef e7       	ldi	r30, 0x7F	; 127
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	fd ab       	std	Y+53, r31	; 0x35
    1a00:	ec ab       	std	Y+52, r30	; 0x34
    1a02:	f8 e0       	ldi	r31, 0x08	; 8
    1a04:	fe ab       	std	Y+54, r31	; 0x36
    1a06:	ec a9       	ldd	r30, Y+52	; 0x34
    1a08:	fd a9       	ldd	r31, Y+53	; 0x35
    1a0a:	00 80       	ld	r0, Z
    1a0c:	8c a9       	ldd	r24, Y+52	; 0x34
    1a0e:	9d a9       	ldd	r25, Y+53	; 0x35
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	9d ab       	std	Y+53, r25	; 0x35
    1a14:	8c ab       	std	Y+52, r24	; 0x34
    1a16:	ea a9       	ldd	r30, Y+50	; 0x32
    1a18:	fb a9       	ldd	r31, Y+51	; 0x33
    1a1a:	00 82       	st	Z, r0
    1a1c:	8a a9       	ldd	r24, Y+50	; 0x32
    1a1e:	9b a9       	ldd	r25, Y+51	; 0x33
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	9b ab       	std	Y+51, r25	; 0x33
    1a24:	8a ab       	std	Y+50, r24	; 0x32
    1a26:	9e a9       	ldd	r25, Y+54	; 0x36
    1a28:	91 50       	subi	r25, 0x01	; 1
    1a2a:	9e ab       	std	Y+54, r25	; 0x36
    1a2c:	ee a9       	ldd	r30, Y+54	; 0x36
    1a2e:	ee 23       	and	r30, r30
    1a30:	51 f7       	brne	.-44     	; 0x1a06 <main+0x2a>
	LEDS LEDRed= {DIO_u8_PORTB,
				 DIO_u8_PIN0,
				 ATIVE_HIGH
				 };
    1a32:	ce 01       	movw	r24, r28
    1a34:	89 96       	adiw	r24, 0x29	; 41
    1a36:	98 af       	std	Y+56, r25	; 0x38
    1a38:	8f ab       	std	Y+55, r24	; 0x37
    1a3a:	ec e7       	ldi	r30, 0x7C	; 124
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	fa af       	std	Y+58, r31	; 0x3a
    1a40:	e9 af       	std	Y+57, r30	; 0x39
    1a42:	f3 e0       	ldi	r31, 0x03	; 3
    1a44:	fb af       	std	Y+59, r31	; 0x3b
    1a46:	e9 ad       	ldd	r30, Y+57	; 0x39
    1a48:	fa ad       	ldd	r31, Y+58	; 0x3a
    1a4a:	00 80       	ld	r0, Z
    1a4c:	89 ad       	ldd	r24, Y+57	; 0x39
    1a4e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	9a af       	std	Y+58, r25	; 0x3a
    1a54:	89 af       	std	Y+57, r24	; 0x39
    1a56:	ef a9       	ldd	r30, Y+55	; 0x37
    1a58:	f8 ad       	ldd	r31, Y+56	; 0x38
    1a5a:	00 82       	st	Z, r0
    1a5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	98 af       	std	Y+56, r25	; 0x38
    1a64:	8f ab       	std	Y+55, r24	; 0x37
    1a66:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a68:	91 50       	subi	r25, 0x01	; 1
    1a6a:	9b af       	std	Y+59, r25	; 0x3b
    1a6c:	eb ad       	ldd	r30, Y+59	; 0x3b
    1a6e:	ee 23       	and	r30, r30
    1a70:	51 f7       	brne	.-44     	; 0x1a46 <main+0x6a>
	LEDS LEDYellow= {DIO_u8_PORTB,
					DIO_u8_PIN1,
					ATIVE_HIGH
					};
    1a72:	ce 01       	movw	r24, r28
    1a74:	8c 96       	adiw	r24, 0x2c	; 44
    1a76:	9d af       	std	Y+61, r25	; 0x3d
    1a78:	8c af       	std	Y+60, r24	; 0x3c
    1a7a:	e9 e7       	ldi	r30, 0x79	; 121
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	ff af       	std	Y+63, r31	; 0x3f
    1a80:	ee af       	std	Y+62, r30	; 0x3e
    1a82:	f3 e0       	ldi	r31, 0x03	; 3
    1a84:	21 96       	adiw	r28, 0x01	; 1
    1a86:	ff af       	std	Y+63, r31	; 0x3f
    1a88:	21 97       	sbiw	r28, 0x01	; 1
    1a8a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a8c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a8e:	00 80       	ld	r0, Z
    1a90:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a92:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	9f af       	std	Y+63, r25	; 0x3f
    1a98:	8e af       	std	Y+62, r24	; 0x3e
    1a9a:	ec ad       	ldd	r30, Y+60	; 0x3c
    1a9c:	fd ad       	ldd	r31, Y+61	; 0x3d
    1a9e:	00 82       	st	Z, r0
    1aa0:	8c ad       	ldd	r24, Y+60	; 0x3c
    1aa2:	9d ad       	ldd	r25, Y+61	; 0x3d
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	9d af       	std	Y+61, r25	; 0x3d
    1aa8:	8c af       	std	Y+60, r24	; 0x3c
    1aaa:	21 96       	adiw	r28, 0x01	; 1
    1aac:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aae:	21 97       	sbiw	r28, 0x01	; 1
    1ab0:	91 50       	subi	r25, 0x01	; 1
    1ab2:	21 96       	adiw	r28, 0x01	; 1
    1ab4:	9f af       	std	Y+63, r25	; 0x3f
    1ab6:	21 97       	sbiw	r28, 0x01	; 1
    1ab8:	21 96       	adiw	r28, 0x01	; 1
    1aba:	ef ad       	ldd	r30, Y+63	; 0x3f
    1abc:	21 97       	sbiw	r28, 0x01	; 1
    1abe:	ee 23       	and	r30, r30
    1ac0:	21 f7       	brne	.-56     	; 0x1a8a <main+0xae>
	LEDS LEDGreen= {DIO_u8_PORTB,
				   DIO_u8_PIN2,
				   ATIVE_HIGH
				   };
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	8f 96       	adiw	r24, 0x2f	; 47
    1ac6:	23 96       	adiw	r28, 0x03	; 3
    1ac8:	9f af       	std	Y+63, r25	; 0x3f
    1aca:	8e af       	std	Y+62, r24	; 0x3e
    1acc:	23 97       	sbiw	r28, 0x03	; 3
    1ace:	e6 e7       	ldi	r30, 0x76	; 118
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	25 96       	adiw	r28, 0x05	; 5
    1ad4:	ff af       	std	Y+63, r31	; 0x3f
    1ad6:	ee af       	std	Y+62, r30	; 0x3e
    1ad8:	25 97       	sbiw	r28, 0x05	; 5
    1ada:	f3 e0       	ldi	r31, 0x03	; 3
    1adc:	26 96       	adiw	r28, 0x06	; 6
    1ade:	ff af       	std	Y+63, r31	; 0x3f
    1ae0:	26 97       	sbiw	r28, 0x06	; 6
    1ae2:	25 96       	adiw	r28, 0x05	; 5
    1ae4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ae6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ae8:	25 97       	sbiw	r28, 0x05	; 5
    1aea:	00 80       	ld	r0, Z
    1aec:	25 96       	adiw	r28, 0x05	; 5
    1aee:	8e ad       	ldd	r24, Y+62	; 0x3e
    1af0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1af2:	25 97       	sbiw	r28, 0x05	; 5
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	25 96       	adiw	r28, 0x05	; 5
    1af8:	9f af       	std	Y+63, r25	; 0x3f
    1afa:	8e af       	std	Y+62, r24	; 0x3e
    1afc:	25 97       	sbiw	r28, 0x05	; 5
    1afe:	23 96       	adiw	r28, 0x03	; 3
    1b00:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b02:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b04:	23 97       	sbiw	r28, 0x03	; 3
    1b06:	00 82       	st	Z, r0
    1b08:	23 96       	adiw	r28, 0x03	; 3
    1b0a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b0e:	23 97       	sbiw	r28, 0x03	; 3
    1b10:	01 96       	adiw	r24, 0x01	; 1
    1b12:	23 96       	adiw	r28, 0x03	; 3
    1b14:	9f af       	std	Y+63, r25	; 0x3f
    1b16:	8e af       	std	Y+62, r24	; 0x3e
    1b18:	23 97       	sbiw	r28, 0x03	; 3
    1b1a:	26 96       	adiw	r28, 0x06	; 6
    1b1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b1e:	26 97       	sbiw	r28, 0x06	; 6
    1b20:	91 50       	subi	r25, 0x01	; 1
    1b22:	26 96       	adiw	r28, 0x06	; 6
    1b24:	9f af       	std	Y+63, r25	; 0x3f
    1b26:	26 97       	sbiw	r28, 0x06	; 6
    1b28:	26 96       	adiw	r28, 0x06	; 6
    1b2a:	ef ad       	ldd	r30, Y+63	; 0x3f
    1b2c:	26 97       	sbiw	r28, 0x06	; 6
    1b2e:	ee 23       	and	r30, r30
    1b30:	c1 f6       	brne	.-80     	; 0x1ae2 <main+0x106>
	PORT_voidInit();
    1b32:	0e 94 c7 0c 	call	0x198e	; 0x198e <PORT_voidInit>
	LCD_voidInit();
    1b36:	0e 94 81 09 	call	0x1302	; 0x1302 <LCD_voidInit>
	ADC_voidInit();
    1b3a:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_voidInit>
	ADC_voidENABLE();
    1b3e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <ADC_voidENABLE>
	while(1)
	{
		Local_u16ADCReading= ADC_u16GetChannelReading(0);
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0e 94 c5 05 	call	0xb8a	; 0xb8a <ADC_u16GetChannelReading>
    1b4a:	98 a3       	std	Y+32, r25	; 0x20
    1b4c:	8f 8f       	std	Y+31, r24	; 0x1f
		Local_u16Temp= ((500UL*(u32)Local_u16ADCReading)/256UL);
    1b4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b50:	98 a1       	ldd	r25, Y+32	; 0x20
    1b52:	cc 01       	movw	r24, r24
    1b54:	a0 e0       	ldi	r26, 0x00	; 0
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	24 ef       	ldi	r18, 0xF4	; 244
    1b5a:	31 e0       	ldi	r19, 0x01	; 1
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__mulsi3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	89 2f       	mov	r24, r25
    1b6e:	9a 2f       	mov	r25, r26
    1b70:	ab 2f       	mov	r26, r27
    1b72:	bb 27       	eor	r27, r27
    1b74:	9e 8f       	std	Y+30, r25	; 0x1e
    1b76:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_voidGotoXY(0,0);
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	0e 94 13 0c 	call	0x1826	; 0x1826 <LCD_voidGotoXY>
		LCD_voidWriteString("Temperature: ");
    1b80:	80 e6       	ldi	r24, 0x60	; 96
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_voidWriteString>
		LCD_voidWriteNumber(Local_u16Temp);
    1b88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b8c:	cc 01       	movw	r24, r24
    1b8e:	a0 e0       	ldi	r26, 0x00	; 0
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_voidWriteNumber>
		LCD_voidCustomCharacter(Degree, 1, 0,16);
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	81 96       	adiw	r24, 0x21	; 33
    1b9e:	61 e0       	ldi	r22, 0x01	; 1
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	20 e1       	ldi	r18, 0x10	; 16
    1ba4:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCD_voidCustomCharacter>
		if(Local_u16Temp<30)
    1ba8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1baa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bac:	8e 31       	cpi	r24, 0x1E	; 30
    1bae:	91 05       	cpc	r25, r1
    1bb0:	b8 f4       	brcc	.+46     	; 0x1be0 <main+0x204>
		{
			LED_voidOFF(&LEDRed);
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	89 96       	adiw	r24, 0x29	; 41
    1bb6:	0e 94 9c 0c 	call	0x1938	; 0x1938 <LED_voidOFF>
			LED_voidOFF(&LEDYellow);
    1bba:	ce 01       	movw	r24, r28
    1bbc:	8c 96       	adiw	r24, 0x2c	; 44
    1bbe:	0e 94 9c 0c 	call	0x1938	; 0x1938 <LED_voidOFF>
			DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN3, DIO_u8_PIN_LOW);
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	63 e0       	ldi	r22, 0x03	; 3
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_PIN_LOW);
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	64 e0       	ldi	r22, 0x04	; 4
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
			LED_voidON(&LEDGreen);
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	8f 96       	adiw	r24, 0x2f	; 47
    1bda:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LED_voidON>
    1bde:	b1 cf       	rjmp	.-158    	; 0x1b42 <main+0x166>
		}
		else if(Local_u16Temp>30 && Local_u16Temp<40)
    1be0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1be4:	8f 31       	cpi	r24, 0x1F	; 31
    1be6:	91 05       	cpc	r25, r1
    1be8:	b8 f0       	brcs	.+46     	; 0x1c18 <main+0x23c>
    1bea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bee:	88 32       	cpi	r24, 0x28	; 40
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	90 f4       	brcc	.+36     	; 0x1c18 <main+0x23c>
		{
			LED_voidOFF(&LEDGreen);
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	8f 96       	adiw	r24, 0x2f	; 47
    1bf8:	0e 94 9c 0c 	call	0x1938	; 0x1938 <LED_voidOFF>
			LED_voidOFF(&LEDRed);
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	89 96       	adiw	r24, 0x29	; 41
    1c00:	0e 94 9c 0c 	call	0x1938	; 0x1938 <LED_voidOFF>
			LED_voidON(&LEDYellow);
    1c04:	ce 01       	movw	r24, r28
    1c06:	8c 96       	adiw	r24, 0x2c	; 44
    1c08:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LED_voidON>
			DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN3, DIO_u8_PIN_HIGH);
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	63 e0       	ldi	r22, 0x03	; 3
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
    1c16:	95 cf       	rjmp	.-214    	; 0x1b42 <main+0x166>
		}
		else if(Local_u16Temp>40)
    1c18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c1c:	89 32       	cpi	r24, 0x29	; 41
    1c1e:	91 05       	cpc	r25, r1
    1c20:	08 f4       	brcc	.+2      	; 0x1c24 <main+0x248>
    1c22:	8f cf       	rjmp	.-226    	; 0x1b42 <main+0x166>
		{
			LED_voidOFF(&LEDYellow);
    1c24:	ce 01       	movw	r24, r28
    1c26:	8c 96       	adiw	r24, 0x2c	; 44
    1c28:	0e 94 9c 0c 	call	0x1938	; 0x1938 <LED_voidOFF>
			LED_voidOFF(&LEDGreen);
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	8f 96       	adiw	r24, 0x2f	; 47
    1c30:	0e 94 9c 0c 	call	0x1938	; 0x1938 <LED_voidOFF>
			LED_voidON(&LEDRed);
    1c34:	ce 01       	movw	r24, r28
    1c36:	89 96       	adiw	r24, 0x29	; 41
    1c38:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <LED_voidON>
			DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN3, DIO_u8_PIN_LOW);
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	63 e0       	ldi	r22, 0x03	; 3
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_PIN_HIGH);
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	64 e0       	ldi	r22, 0x04	; 4
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	aa ef       	ldi	r26, 0xFA	; 250
    1c56:	b3 e4       	ldi	r27, 0x43	; 67
    1c58:	89 8f       	std	Y+25, r24	; 0x19
    1c5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c60:	69 8d       	ldd	r22, Y+25	; 0x19
    1c62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	4a ef       	ldi	r20, 0xFA	; 250
    1c6e:	54 e4       	ldi	r21, 0x44	; 68
    1c70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	8d 8b       	std	Y+21, r24	; 0x15
    1c7a:	9e 8b       	std	Y+22, r25	; 0x16
    1c7c:	af 8b       	std	Y+23, r26	; 0x17
    1c7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c80:	6d 89       	ldd	r22, Y+21	; 0x15
    1c82:	7e 89       	ldd	r23, Y+22	; 0x16
    1c84:	8f 89       	ldd	r24, Y+23	; 0x17
    1c86:	98 8d       	ldd	r25, Y+24	; 0x18
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <main+0x2c6>
		__ticks = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9c 8b       	std	Y+20, r25	; 0x14
    1c9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ca0:	3f c0       	rjmp	.+126    	; 0x1d20 <main+0x344>
	else if (__tmp > 65535)
    1ca2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	4c f5       	brge	.+82     	; 0x1d0c <main+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cba:	69 8d       	ldd	r22, Y+25	; 0x19
    1cbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9c 8b       	std	Y+20, r25	; 0x14
    1ce0:	8b 8b       	std	Y+19, r24	; 0x13
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <main+0x326>
    1ce4:	88 ec       	ldi	r24, 0xC8	; 200
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9a 8b       	std	Y+18, r25	; 0x12
    1cea:	89 8b       	std	Y+17, r24	; 0x11
    1cec:	89 89       	ldd	r24, Y+17	; 0x11
    1cee:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <main+0x314>
    1cf4:	9a 8b       	std	Y+18, r25	; 0x12
    1cf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9c 8b       	std	Y+20, r25	; 0x14
    1d00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	8b 89       	ldd	r24, Y+19	; 0x13
    1d04:	9c 89       	ldd	r25, Y+20	; 0x14
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <main+0x308>
    1d0a:	14 c0       	rjmp	.+40     	; 0x1d34 <main+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d10:	8f 89       	ldd	r24, Y+23	; 0x17
    1d12:	98 8d       	ldd	r25, Y+24	; 0x18
    1d14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9c 8b       	std	Y+20, r25	; 0x14
    1d1e:	8b 8b       	std	Y+19, r24	; 0x13
    1d20:	8b 89       	ldd	r24, Y+19	; 0x13
    1d22:	9c 89       	ldd	r25, Y+20	; 0x14
    1d24:	98 8b       	std	Y+16, r25	; 0x10
    1d26:	8f 87       	std	Y+15, r24	; 0x0f
    1d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2a:	98 89       	ldd	r25, Y+16	; 0x10
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <main+0x350>
    1d30:	98 8b       	std	Y+16, r25	; 0x10
    1d32:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			DIO_u8SetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, DIO_u8_PIN_LOW);
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	64 e0       	ldi	r22, 0x04	; 4
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	0e 94 0a 06 	call	0xc14	; 0xc14 <DIO_u8SetPinValue>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	aa ef       	ldi	r26, 0xFA	; 250
    1d44:	b3 e4       	ldi	r27, 0x43	; 67
    1d46:	8b 87       	std	Y+11, r24	; 0x0b
    1d48:	9c 87       	std	Y+12, r25	; 0x0c
    1d4a:	ad 87       	std	Y+13, r26	; 0x0d
    1d4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a ef       	ldi	r20, 0xFA	; 250
    1d5c:	54 e4       	ldi	r21, 0x44	; 68
    1d5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	8f 83       	std	Y+7, r24	; 0x07
    1d68:	98 87       	std	Y+8, r25	; 0x08
    1d6a:	a9 87       	std	Y+9, r26	; 0x09
    1d6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d70:	78 85       	ldd	r23, Y+8	; 0x08
    1d72:	89 85       	ldd	r24, Y+9	; 0x09
    1d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <main+0x3b4>
		__ticks = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	3f c0       	rjmp	.+126    	; 0x1e0e <main+0x432>
	else if (__tmp > 65535)
    1d90:	6f 81       	ldd	r22, Y+7	; 0x07
    1d92:	78 85       	ldd	r23, Y+8	; 0x08
    1d94:	89 85       	ldd	r24, Y+9	; 0x09
    1d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	4f e7       	ldi	r20, 0x7F	; 127
    1d9e:	57 e4       	ldi	r21, 0x47	; 71
    1da0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	4c f5       	brge	.+82     	; 0x1dfa <main+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1daa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9e 83       	std	Y+6, r25	; 0x06
    1dce:	8d 83       	std	Y+5, r24	; 0x05
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <main+0x414>
    1dd2:	88 ec       	ldi	r24, 0xC8	; 200
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9c 83       	std	Y+4, r25	; 0x04
    1dd8:	8b 83       	std	Y+3, r24	; 0x03
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <main+0x402>
    1de2:	9c 83       	std	Y+4, r25	; 0x04
    1de4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	9e 81       	ldd	r25, Y+6	; 0x06
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <main+0x3f6>
    1df8:	a4 ce       	rjmp	.-696    	; 0x1b42 <main+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfc:	78 85       	ldd	r23, Y+8	; 0x08
    1dfe:	89 85       	ldd	r24, Y+9	; 0x09
    1e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e10:	9e 81       	ldd	r25, Y+6	; 0x06
    1e12:	9a 83       	std	Y+2, r25	; 0x02
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <main+0x43e>
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	8f ce       	rjmp	.-738    	; 0x1b42 <main+0x166>

00001e24 <__mulsi3>:
    1e24:	62 9f       	mul	r22, r18
    1e26:	d0 01       	movw	r26, r0
    1e28:	73 9f       	mul	r23, r19
    1e2a:	f0 01       	movw	r30, r0
    1e2c:	82 9f       	mul	r24, r18
    1e2e:	e0 0d       	add	r30, r0
    1e30:	f1 1d       	adc	r31, r1
    1e32:	64 9f       	mul	r22, r20
    1e34:	e0 0d       	add	r30, r0
    1e36:	f1 1d       	adc	r31, r1
    1e38:	92 9f       	mul	r25, r18
    1e3a:	f0 0d       	add	r31, r0
    1e3c:	83 9f       	mul	r24, r19
    1e3e:	f0 0d       	add	r31, r0
    1e40:	74 9f       	mul	r23, r20
    1e42:	f0 0d       	add	r31, r0
    1e44:	65 9f       	mul	r22, r21
    1e46:	f0 0d       	add	r31, r0
    1e48:	99 27       	eor	r25, r25
    1e4a:	72 9f       	mul	r23, r18
    1e4c:	b0 0d       	add	r27, r0
    1e4e:	e1 1d       	adc	r30, r1
    1e50:	f9 1f       	adc	r31, r25
    1e52:	63 9f       	mul	r22, r19
    1e54:	b0 0d       	add	r27, r0
    1e56:	e1 1d       	adc	r30, r1
    1e58:	f9 1f       	adc	r31, r25
    1e5a:	bd 01       	movw	r22, r26
    1e5c:	cf 01       	movw	r24, r30
    1e5e:	11 24       	eor	r1, r1
    1e60:	08 95       	ret

00001e62 <__udivmodsi4>:
    1e62:	a1 e2       	ldi	r26, 0x21	; 33
    1e64:	1a 2e       	mov	r1, r26
    1e66:	aa 1b       	sub	r26, r26
    1e68:	bb 1b       	sub	r27, r27
    1e6a:	fd 01       	movw	r30, r26
    1e6c:	0d c0       	rjmp	.+26     	; 0x1e88 <__udivmodsi4_ep>

00001e6e <__udivmodsi4_loop>:
    1e6e:	aa 1f       	adc	r26, r26
    1e70:	bb 1f       	adc	r27, r27
    1e72:	ee 1f       	adc	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	a2 17       	cp	r26, r18
    1e78:	b3 07       	cpc	r27, r19
    1e7a:	e4 07       	cpc	r30, r20
    1e7c:	f5 07       	cpc	r31, r21
    1e7e:	20 f0       	brcs	.+8      	; 0x1e88 <__udivmodsi4_ep>
    1e80:	a2 1b       	sub	r26, r18
    1e82:	b3 0b       	sbc	r27, r19
    1e84:	e4 0b       	sbc	r30, r20
    1e86:	f5 0b       	sbc	r31, r21

00001e88 <__udivmodsi4_ep>:
    1e88:	66 1f       	adc	r22, r22
    1e8a:	77 1f       	adc	r23, r23
    1e8c:	88 1f       	adc	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	1a 94       	dec	r1
    1e92:	69 f7       	brne	.-38     	; 0x1e6e <__udivmodsi4_loop>
    1e94:	60 95       	com	r22
    1e96:	70 95       	com	r23
    1e98:	80 95       	com	r24
    1e9a:	90 95       	com	r25
    1e9c:	9b 01       	movw	r18, r22
    1e9e:	ac 01       	movw	r20, r24
    1ea0:	bd 01       	movw	r22, r26
    1ea2:	cf 01       	movw	r24, r30
    1ea4:	08 95       	ret

00001ea6 <__prologue_saves__>:
    1ea6:	2f 92       	push	r2
    1ea8:	3f 92       	push	r3
    1eaa:	4f 92       	push	r4
    1eac:	5f 92       	push	r5
    1eae:	6f 92       	push	r6
    1eb0:	7f 92       	push	r7
    1eb2:	8f 92       	push	r8
    1eb4:	9f 92       	push	r9
    1eb6:	af 92       	push	r10
    1eb8:	bf 92       	push	r11
    1eba:	cf 92       	push	r12
    1ebc:	df 92       	push	r13
    1ebe:	ef 92       	push	r14
    1ec0:	ff 92       	push	r15
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	ca 1b       	sub	r28, r26
    1ed0:	db 0b       	sbc	r29, r27
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	09 94       	ijmp

00001ede <__epilogue_restores__>:
    1ede:	2a 88       	ldd	r2, Y+18	; 0x12
    1ee0:	39 88       	ldd	r3, Y+17	; 0x11
    1ee2:	48 88       	ldd	r4, Y+16	; 0x10
    1ee4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ee6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ee8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eea:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eec:	9b 84       	ldd	r9, Y+11	; 0x0b
    1eee:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ef0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ef2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ef4:	df 80       	ldd	r13, Y+7	; 0x07
    1ef6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ef8:	fd 80       	ldd	r15, Y+5	; 0x05
    1efa:	0c 81       	ldd	r16, Y+4	; 0x04
    1efc:	1b 81       	ldd	r17, Y+3	; 0x03
    1efe:	aa 81       	ldd	r26, Y+2	; 0x02
    1f00:	b9 81       	ldd	r27, Y+1	; 0x01
    1f02:	ce 0f       	add	r28, r30
    1f04:	d1 1d       	adc	r29, r1
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	ed 01       	movw	r28, r26
    1f12:	08 95       	ret

00001f14 <_exit>:
    1f14:	f8 94       	cli

00001f16 <__stop_program>:
    1f16:	ff cf       	rjmp	.-2      	; 0x1f16 <__stop_program>
